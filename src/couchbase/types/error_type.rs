use std::ffi::CStr;
use std::fmt;
use std::ptr;

use super::super::funcs::lcb_strerror;

#[repr(u32)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum ErrorType {
    Success = 0,
    AuthContinue = 1,
    AuthError = 2,
    DeltaBadval = 3,
    E2big = 4,
    Ebusy = 5,
    Einternal = 6,
    Einval = 7,
    Enomem = 8,
    Erange = 9,
    Error = 10,
    Etmpfail = 11,
    KeyEexists = 12,
    KeyEnoent = 13,
    DlopenFailed = 14,
    DlsymFailed = 15,
    NetworkError = 16,
    NotMyVbucket = 17,
    NotStored = 18,
    NotSupported = 19,
    UnknownCommand = 20,
    UnknownHost = 21,
    ProtocolError = 22,
    Etimedout = 23,
    ConnectError = 24,
    BucketEnoent = 25,
    ClientEnomem = 26,
    ClientEnoconf = 27,
    Ebadhandle = 28,
    ServerBug = 29,
    PluginVersionMismatch = 30,
    InvalidHostFormat = 31,
    InvalidChar = 32,
    DurabilityEtoomany = 33,
    DuplicateCommands = 34,
    NoMatchingServer = 35,
    BadEnvironment = 36,
    Busy = 37,
    InvalidUsername = 38,
    ConfigCacheInvalid = 39,
    SaslmechUnavailable = 40,
    TooManyRedirects = 41,
    MapChanged = 42,
    IncompletePacket = 43,
    Econnrefused = 44,
    Esockshutdown = 45,
    Econnreset = 46,
    Ecantgetport = 47,
    Efdlimitreached = 48,
    Enetunreach = 49,
    EctlUnknown = 50,
    EctlUnsuppmode = 51,
    EctlBadarg = 52,
    EmptyKey = 53,
    SslError = 54,
    SslCantverify = 55,
    SchedfailInternal = 56,
    ClientFeatureUnavailable = 57,
    OptionsConflict = 58,
    HttpError = 59,
    DurabilityNoMutationTokens = 60,
    UnknownMemcachedError = 61,
    MutationLost = 62,
    SubdocPathEnoent = 63,
    SubdocPathMismatch = 64,
    SubdocPathEinval = 65,
    SubdocPathE2big = 66,
    SubdocDocE2deep = 67,
    SubdocValueCantinsert = 68,
    SubdocDocNotjson = 69,
    SubdocNumErange = 70,
    SubdocBadDelta = 71,
    SubdocPathEexists = 72,
    SubdocMultiFailure = 73,
    SubdocValueE2deep = 74,
    EinvalMcd = 75,
    EmptyPath = 76,
    UnknownSdcmd = 77,
    EnoCommands = 78,
    QueryError = 79,
    MaxError = 4096,
}

impl fmt::Display for ErrorType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let description = unsafe {
            CStr::from_ptr(lcb_strerror(ptr::null_mut(), *self)).to_str().unwrap()
        };
        write!(f,"{} ({:?})", description, self)
    }
}
